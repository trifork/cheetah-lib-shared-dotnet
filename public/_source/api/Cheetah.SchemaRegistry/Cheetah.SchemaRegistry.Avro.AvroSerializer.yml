### YamlMime:ManagedReference
items:
- uid: Cheetah.SchemaRegistry.Avro.AvroSerializer
  commentId: T:Cheetah.SchemaRegistry.Avro.AvroSerializer
  id: AvroSerializer
  parent: Cheetah.SchemaRegistry.Avro
  children:
  - Cheetah.SchemaRegistry.Avro.AvroSerializer.FromServices``1(Confluent.SchemaRegistry.Serdes.AvroSerializerConfig)
  langs:
  - csharp
  - vb
  name: AvroSerializer
  nameWithType: AvroSerializer
  fullName: Cheetah.SchemaRegistry.Avro.AvroSerializer
  type: Class
  source:
    remote:
      path: src/Cheetah.SchemaRegistry/Avro.cs
      branch: main
      repo: https://github.com/KastTrifork/cheetah-lib-shared-dotnet
    id: AvroSerializer
    path: ../src/Cheetah.SchemaRegistry/Avro.cs
    startLine: 12
  assemblies:
  - Cheetah.SchemaRegistry
  namespace: Cheetah.SchemaRegistry.Avro
  summary: Provides methods for creating Avro serializers.
  example: []
  syntax:
    content: public static class AvroSerializer
    content.vb: Public Module AvroSerializer
  inheritance:
  - System.Object
- uid: Cheetah.SchemaRegistry.Avro.AvroSerializer.FromServices``1(Confluent.SchemaRegistry.Serdes.AvroSerializerConfig)
  commentId: M:Cheetah.SchemaRegistry.Avro.AvroSerializer.FromServices``1(Confluent.SchemaRegistry.Serdes.AvroSerializerConfig)
  id: FromServices``1(Confluent.SchemaRegistry.Serdes.AvroSerializerConfig)
  parent: Cheetah.SchemaRegistry.Avro.AvroSerializer
  langs:
  - csharp
  - vb
  name: FromServices<T>(AvroSerializerConfig?)
  nameWithType: AvroSerializer.FromServices<T>(AvroSerializerConfig?)
  fullName: Cheetah.SchemaRegistry.Avro.AvroSerializer.FromServices<T>(Confluent.SchemaRegistry.Serdes.AvroSerializerConfig?)
  type: Method
  source:
    remote:
      path: src/Cheetah.SchemaRegistry/Avro.cs
      branch: main
      repo: https://github.com/KastTrifork/cheetah-lib-shared-dotnet
    id: FromServices
    path: ../src/Cheetah.SchemaRegistry/Avro.cs
    startLine: 20
  assemblies:
  - Cheetah.SchemaRegistry
  namespace: Cheetah.SchemaRegistry.Avro
  summary: Creates an Avro serializer from services.
  example: []
  syntax:
    content: public static Func<IServiceProvider, ISerializer<T>> FromServices<T>(AvroSerializerConfig? serializerConfig = null)
    parameters:
    - id: serializerConfig
      type: Confluent.SchemaRegistry.Serdes.AvroSerializerConfig
      description: Optional Avro serializer configuration.
    typeParameters:
    - id: T
      description: The type of object to serialize.
    return:
      type: System.Func{System.IServiceProvider,Confluent.Kafka.ISerializer{{T}}}
      description: A function that creates an Avro serializer instance.
    content.vb: Public Shared Function FromServices(Of T)(serializerConfig As AvroSerializerConfig = Nothing) As Func(Of IServiceProvider, ISerializer(Of T))
  overload: Cheetah.SchemaRegistry.Avro.AvroSerializer.FromServices*
  nameWithType.vb: AvroSerializer.FromServices(Of T)(AvroSerializerConfig)
  fullName.vb: Cheetah.SchemaRegistry.Avro.AvroSerializer.FromServices(Of T)(Confluent.SchemaRegistry.Serdes.AvroSerializerConfig)
  name.vb: FromServices(Of T)(AvroSerializerConfig)
references:
- uid: Cheetah.SchemaRegistry.Avro
  commentId: N:Cheetah.SchemaRegistry.Avro
  href: Cheetah.html
  name: Cheetah.SchemaRegistry.Avro
  nameWithType: Cheetah.SchemaRegistry.Avro
  fullName: Cheetah.SchemaRegistry.Avro
  spec.csharp:
  - uid: Cheetah
    name: Cheetah
    href: Cheetah.html
  - name: .
  - uid: Cheetah.SchemaRegistry
    name: SchemaRegistry
    href: Cheetah.SchemaRegistry.html
  - name: .
  - uid: Cheetah.SchemaRegistry.Avro
    name: Avro
    href: Cheetah.SchemaRegistry.Avro.html
  spec.vb:
  - uid: Cheetah
    name: Cheetah
    href: Cheetah.html
  - name: .
  - uid: Cheetah.SchemaRegistry
    name: SchemaRegistry
    href: Cheetah.SchemaRegistry.html
  - name: .
  - uid: Cheetah.SchemaRegistry.Avro
    name: Avro
    href: Cheetah.SchemaRegistry.Avro.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Cheetah.SchemaRegistry.Avro.AvroSerializer.FromServices*
  commentId: Overload:Cheetah.SchemaRegistry.Avro.AvroSerializer.FromServices
  href: Cheetah.SchemaRegistry.Avro.AvroSerializer.html#Cheetah_SchemaRegistry_Avro_AvroSerializer_FromServices__1_Confluent_SchemaRegistry_Serdes_AvroSerializerConfig_
  name: FromServices
  nameWithType: AvroSerializer.FromServices
  fullName: Cheetah.SchemaRegistry.Avro.AvroSerializer.FromServices
- uid: Confluent.SchemaRegistry.Serdes.AvroSerializerConfig
  commentId: T:Confluent.SchemaRegistry.Serdes.AvroSerializerConfig
  parent: Confluent.SchemaRegistry.Serdes
  isExternal: true
  name: AvroSerializerConfig
  nameWithType: AvroSerializerConfig
  fullName: Confluent.SchemaRegistry.Serdes.AvroSerializerConfig
- uid: System.Func{System.IServiceProvider,Confluent.Kafka.ISerializer{{T}}}
  commentId: T:System.Func{System.IServiceProvider,Confluent.Kafka.ISerializer{``0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<IServiceProvider, ISerializer<T>>
  nameWithType: Func<IServiceProvider, ISerializer<T>>
  fullName: System.Func<System.IServiceProvider, Confluent.Kafka.ISerializer<T>>
  nameWithType.vb: Func(Of IServiceProvider, ISerializer(Of T))
  fullName.vb: System.Func(Of System.IServiceProvider, Confluent.Kafka.ISerializer(Of T))
  name.vb: Func(Of IServiceProvider, ISerializer(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iserviceprovider
  - name: ','
  - name: " "
  - uid: Confluent.Kafka.ISerializer`1
    name: ISerializer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.IServiceProvider
    name: IServiceProvider
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iserviceprovider
  - name: ','
  - name: " "
  - uid: Confluent.Kafka.ISerializer`1
    name: ISerializer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Confluent.SchemaRegistry.Serdes
  commentId: N:Confluent.SchemaRegistry.Serdes
  isExternal: true
  name: Confluent.SchemaRegistry.Serdes
  nameWithType: Confluent.SchemaRegistry.Serdes
  fullName: Confluent.SchemaRegistry.Serdes
  spec.csharp:
  - uid: Confluent
    name: Confluent
    isExternal: true
  - name: .
  - uid: Confluent.SchemaRegistry
    name: SchemaRegistry
    isExternal: true
  - name: .
  - uid: Confluent.SchemaRegistry.Serdes
    name: Serdes
    isExternal: true
  spec.vb:
  - uid: Confluent
    name: Confluent
    isExternal: true
  - name: .
  - uid: Confluent.SchemaRegistry
    name: SchemaRegistry
    isExternal: true
  - name: .
  - uid: Confluent.SchemaRegistry.Serdes
    name: Serdes
    isExternal: true
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
