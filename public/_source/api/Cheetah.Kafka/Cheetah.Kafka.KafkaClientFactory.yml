### YamlMime:ManagedReference
items:
- uid: Cheetah.Kafka.KafkaClientFactory
  commentId: T:Cheetah.Kafka.KafkaClientFactory
  id: KafkaClientFactory
  parent: Cheetah.Kafka
  children:
  - Cheetah.Kafka.KafkaClientFactory.#ctor(Cheetah.Auth.Authentication.ITokenService,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Cheetah.Kafka.Configuration.KafkaConfig},Cheetah.Kafka.ClientFactoryOptions,Cheetah.Kafka.Serdes.ISerializerProvider,Cheetah.Kafka.Serdes.IDeserializerProvider)
  - Cheetah.Kafka.KafkaClientFactory.CreateAdminClient(Cheetah.Kafka.AdminClientOptions)
  - Cheetah.Kafka.KafkaClientFactory.CreateAdminClientBuilder(Cheetah.Kafka.AdminClientOptions)
  - Cheetah.Kafka.KafkaClientFactory.CreateConsumerBuilder``2(Cheetah.Kafka.ConsumerOptions{``0,``1})
  - Cheetah.Kafka.KafkaClientFactory.CreateConsumer``2(Cheetah.Kafka.ConsumerOptions{``0,``1})
  - Cheetah.Kafka.KafkaClientFactory.CreateProducerBuilder``2(Cheetah.Kafka.ProducerOptions{``0,``1})
  - Cheetah.Kafka.KafkaClientFactory.CreateProducer``2(Cheetah.Kafka.ProducerOptions{``0,``1})
  langs:
  - csharp
  - vb
  name: KafkaClientFactory
  nameWithType: KafkaClientFactory
  fullName: Cheetah.Kafka.KafkaClientFactory
  type: Class
  source:
    remote:
      path: src/Cheetah.Kafka/KafkaClientFactory.cs
      branch: main
      repo: https://github.com/KastTrifork/cheetah-lib-shared-dotnet
    id: KafkaClientFactory
    path: ../src/Cheetah.Kafka/KafkaClientFactory.cs
    startLine: 16
  assemblies:
  - Cheetah.Kafka
  namespace: Cheetah.Kafka
  summary: Factory for creating Kafka clients
  example: []
  syntax:
    content: public class KafkaClientFactory
    content.vb: Public Class KafkaClientFactory
  inheritance:
  - System.Object
- uid: Cheetah.Kafka.KafkaClientFactory.#ctor(Cheetah.Auth.Authentication.ITokenService,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Cheetah.Kafka.Configuration.KafkaConfig},Cheetah.Kafka.ClientFactoryOptions,Cheetah.Kafka.Serdes.ISerializerProvider,Cheetah.Kafka.Serdes.IDeserializerProvider)
  commentId: M:Cheetah.Kafka.KafkaClientFactory.#ctor(Cheetah.Auth.Authentication.ITokenService,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Cheetah.Kafka.Configuration.KafkaConfig},Cheetah.Kafka.ClientFactoryOptions,Cheetah.Kafka.Serdes.ISerializerProvider,Cheetah.Kafka.Serdes.IDeserializerProvider)
  id: '#ctor(Cheetah.Auth.Authentication.ITokenService,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Cheetah.Kafka.Configuration.KafkaConfig},Cheetah.Kafka.ClientFactoryOptions,Cheetah.Kafka.Serdes.ISerializerProvider,Cheetah.Kafka.Serdes.IDeserializerProvider)'
  parent: Cheetah.Kafka.KafkaClientFactory
  langs:
  - csharp
  - vb
  name: KafkaClientFactory(ITokenService?, ILoggerFactory, IOptions<KafkaConfig>, ClientFactoryOptions, ISerializerProvider?, IDeserializerProvider?)
  nameWithType: KafkaClientFactory.KafkaClientFactory(ITokenService?, ILoggerFactory, IOptions<KafkaConfig>, ClientFactoryOptions, ISerializerProvider?, IDeserializerProvider?)
  fullName: Cheetah.Kafka.KafkaClientFactory.KafkaClientFactory(Cheetah.Auth.Authentication.ITokenService?, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Options.IOptions<Cheetah.Kafka.Configuration.KafkaConfig>, Cheetah.Kafka.ClientFactoryOptions, Cheetah.Kafka.Serdes.ISerializerProvider?, Cheetah.Kafka.Serdes.IDeserializerProvider?)
  type: Constructor
  source:
    remote:
      path: src/Cheetah.Kafka/KafkaClientFactory.cs
      branch: main
      repo: https://github.com/KastTrifork/cheetah-lib-shared-dotnet
    id: .ctor
    path: ../src/Cheetah.Kafka/KafkaClientFactory.cs
    startLine: 35
  assemblies:
  - Cheetah.Kafka
  namespace: Cheetah.Kafka
  summary: Creates a new instance of <xref href="Cheetah.Kafka.KafkaClientFactory" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public KafkaClientFactory(ITokenService? tokenService, ILoggerFactory loggerFactory, IOptions<KafkaConfig> config, ClientFactoryOptions options, ISerializerProvider? serializerProvider, IDeserializerProvider? deserializerProvider)
    parameters:
    - id: tokenService
      type: Cheetah.Auth.Authentication.ITokenService
      description: The token service to use for kafka
    - id: loggerFactory
      type: Microsoft.Extensions.Logging.ILoggerFactory
      description: The logger factory used to create necessary loggers
    - id: config
      type: Microsoft.Extensions.Options.IOptions{Cheetah.Kafka.Configuration.KafkaConfig}
      description: The configuration to use when creating clients
    - id: options
      type: Cheetah.Kafka.ClientFactoryOptions
      description: The options to use when creating clients
    - id: serializerProvider
      type: Cheetah.Kafka.Serdes.ISerializerProvider
      description: ''
    - id: deserializerProvider
      type: Cheetah.Kafka.Serdes.IDeserializerProvider
      description: ''
    content.vb: Public Sub New(tokenService As ITokenService, loggerFactory As ILoggerFactory, config As IOptions(Of KafkaConfig), options As ClientFactoryOptions, serializerProvider As ISerializerProvider, deserializerProvider As IDeserializerProvider)
  overload: Cheetah.Kafka.KafkaClientFactory.#ctor*
  nameWithType.vb: KafkaClientFactory.New(ITokenService, ILoggerFactory, IOptions(Of KafkaConfig), ClientFactoryOptions, ISerializerProvider, IDeserializerProvider)
  fullName.vb: Cheetah.Kafka.KafkaClientFactory.New(Cheetah.Auth.Authentication.ITokenService, Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Options.IOptions(Of Cheetah.Kafka.Configuration.KafkaConfig), Cheetah.Kafka.ClientFactoryOptions, Cheetah.Kafka.Serdes.ISerializerProvider, Cheetah.Kafka.Serdes.IDeserializerProvider)
  name.vb: New(ITokenService, ILoggerFactory, IOptions(Of KafkaConfig), ClientFactoryOptions, ISerializerProvider, IDeserializerProvider)
- uid: Cheetah.Kafka.KafkaClientFactory.CreateProducer``2(Cheetah.Kafka.ProducerOptions{``0,``1})
  commentId: M:Cheetah.Kafka.KafkaClientFactory.CreateProducer``2(Cheetah.Kafka.ProducerOptions{``0,``1})
  id: CreateProducer``2(Cheetah.Kafka.ProducerOptions{``0,``1})
  parent: Cheetah.Kafka.KafkaClientFactory
  langs:
  - csharp
  - vb
  name: CreateProducer<TKey, TValue>(ProducerOptions<TKey, TValue>?)
  nameWithType: KafkaClientFactory.CreateProducer<TKey, TValue>(ProducerOptions<TKey, TValue>?)
  fullName: Cheetah.Kafka.KafkaClientFactory.CreateProducer<TKey, TValue>(Cheetah.Kafka.ProducerOptions<TKey, TValue>?)
  type: Method
  source:
    remote:
      path: src/Cheetah.Kafka/KafkaClientFactory.cs
      branch: main
      repo: https://github.com/KastTrifork/cheetah-lib-shared-dotnet
    id: CreateProducer
    path: ../src/Cheetah.Kafka/KafkaClientFactory.cs
    startLine: 60
  assemblies:
  - Cheetah.Kafka
  namespace: Cheetah.Kafka
  summary: Creates a pre-configured <xref href="Confluent.Kafka.IProducer%602" data-throw-if-not-resolved="false"></xref>/&gt;
  example: []
  syntax:
    content: public IProducer<TKey, TValue> CreateProducer<TKey, TValue>(ProducerOptions<TKey, TValue>? producerOptions = null)
    parameters:
    - id: producerOptions
      type: Cheetah.Kafka.ProducerOptions{{TKey},{TValue}}
      description: Optional producer options used to modify the configuration
    typeParameters:
    - id: TKey
      description: The type of message key that the resulting producer will produce
    - id: TValue
      description: The type of message value that the resulting producer will produce
    return:
      type: Confluent.Kafka.IProducer{{TKey},{TValue}}
      description: A pre-configured <xref href="Confluent.Kafka.IProducer%602" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function CreateProducer(Of TKey, TValue)(producerOptions As ProducerOptions(Of TKey, TValue) = Nothing) As IProducer(Of TKey, TValue)
  overload: Cheetah.Kafka.KafkaClientFactory.CreateProducer*
  nameWithType.vb: KafkaClientFactory.CreateProducer(Of TKey, TValue)(ProducerOptions(Of TKey, TValue))
  fullName.vb: Cheetah.Kafka.KafkaClientFactory.CreateProducer(Of TKey, TValue)(Cheetah.Kafka.ProducerOptions(Of TKey, TValue))
  name.vb: CreateProducer(Of TKey, TValue)(ProducerOptions(Of TKey, TValue))
- uid: Cheetah.Kafka.KafkaClientFactory.CreateProducerBuilder``2(Cheetah.Kafka.ProducerOptions{``0,``1})
  commentId: M:Cheetah.Kafka.KafkaClientFactory.CreateProducerBuilder``2(Cheetah.Kafka.ProducerOptions{``0,``1})
  id: CreateProducerBuilder``2(Cheetah.Kafka.ProducerOptions{``0,``1})
  parent: Cheetah.Kafka.KafkaClientFactory
  langs:
  - csharp
  - vb
  name: CreateProducerBuilder<TKey, TValue>(ProducerOptions<TKey, TValue>?)
  nameWithType: KafkaClientFactory.CreateProducerBuilder<TKey, TValue>(ProducerOptions<TKey, TValue>?)
  fullName: Cheetah.Kafka.KafkaClientFactory.CreateProducerBuilder<TKey, TValue>(Cheetah.Kafka.ProducerOptions<TKey, TValue>?)
  type: Method
  source:
    remote:
      path: src/Cheetah.Kafka/KafkaClientFactory.cs
      branch: main
      repo: https://github.com/KastTrifork/cheetah-lib-shared-dotnet
    id: CreateProducerBuilder
    path: ../src/Cheetah.Kafka/KafkaClientFactory.cs
    startLine: 70
  assemblies:
  - Cheetah.Kafka
  namespace: Cheetah.Kafka
  summary: Creates a pre-configured <xref href="Confluent.Kafka.ProducerBuilder%602" data-throw-if-not-resolved="false"></xref>/&gt;
  example: []
  syntax:
    content: public ProducerBuilder<TKey, TValue> CreateProducerBuilder<TKey, TValue>(ProducerOptions<TKey, TValue>? producerOptions = null)
    parameters:
    - id: producerOptions
      type: Cheetah.Kafka.ProducerOptions{{TKey},{TValue}}
    typeParameters:
    - id: TKey
      description: The type of message key that the resulting consumer will consume
    - id: TValue
      description: The type of message value that the resulting consumer will consume
    return:
      type: Confluent.Kafka.ProducerBuilder{{TKey},{TValue}}
      description: A pre-configured <xref href="Confluent.Kafka.IConsumer%602" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function CreateProducerBuilder(Of TKey, TValue)(producerOptions As ProducerOptions(Of TKey, TValue) = Nothing) As ProducerBuilder(Of TKey, TValue)
  overload: Cheetah.Kafka.KafkaClientFactory.CreateProducerBuilder*
  nameWithType.vb: KafkaClientFactory.CreateProducerBuilder(Of TKey, TValue)(ProducerOptions(Of TKey, TValue))
  fullName.vb: Cheetah.Kafka.KafkaClientFactory.CreateProducerBuilder(Of TKey, TValue)(Cheetah.Kafka.ProducerOptions(Of TKey, TValue))
  name.vb: CreateProducerBuilder(Of TKey, TValue)(ProducerOptions(Of TKey, TValue))
- uid: Cheetah.Kafka.KafkaClientFactory.CreateConsumer``2(Cheetah.Kafka.ConsumerOptions{``0,``1})
  commentId: M:Cheetah.Kafka.KafkaClientFactory.CreateConsumer``2(Cheetah.Kafka.ConsumerOptions{``0,``1})
  id: CreateConsumer``2(Cheetah.Kafka.ConsumerOptions{``0,``1})
  parent: Cheetah.Kafka.KafkaClientFactory
  langs:
  - csharp
  - vb
  name: CreateConsumer<TKey, TValue>(ConsumerOptions<TKey, TValue>?)
  nameWithType: KafkaClientFactory.CreateConsumer<TKey, TValue>(ConsumerOptions<TKey, TValue>?)
  fullName: Cheetah.Kafka.KafkaClientFactory.CreateConsumer<TKey, TValue>(Cheetah.Kafka.ConsumerOptions<TKey, TValue>?)
  type: Method
  source:
    remote:
      path: src/Cheetah.Kafka/KafkaClientFactory.cs
      branch: main
      repo: https://github.com/KastTrifork/cheetah-lib-shared-dotnet
    id: CreateConsumer
    path: ../src/Cheetah.Kafka/KafkaClientFactory.cs
    startLine: 102
  assemblies:
  - Cheetah.Kafka
  namespace: Cheetah.Kafka
  summary: Creates a pre-configured <xref href="Confluent.Kafka.IConsumer%602" data-throw-if-not-resolved="false"></xref>/&gt;
  example: []
  syntax:
    content: public IConsumer<TKey, TValue> CreateConsumer<TKey, TValue>(ConsumerOptions<TKey, TValue>? consumerOptions = null)
    parameters:
    - id: consumerOptions
      type: Cheetah.Kafka.ConsumerOptions{{TKey},{TValue}}
      description: Optional consumer option used to modify the configuration
    typeParameters:
    - id: TKey
      description: The type of message key that the resulting consumer will consume
    - id: TValue
      description: The type of message value that the resulting consumer will consume
    return:
      type: Confluent.Kafka.IConsumer{{TKey},{TValue}}
      description: A pre-configured <xref href="Confluent.Kafka.IConsumer%602" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function CreateConsumer(Of TKey, TValue)(consumerOptions As ConsumerOptions(Of TKey, TValue) = Nothing) As IConsumer(Of TKey, TValue)
  overload: Cheetah.Kafka.KafkaClientFactory.CreateConsumer*
  nameWithType.vb: KafkaClientFactory.CreateConsumer(Of TKey, TValue)(ConsumerOptions(Of TKey, TValue))
  fullName.vb: Cheetah.Kafka.KafkaClientFactory.CreateConsumer(Of TKey, TValue)(Cheetah.Kafka.ConsumerOptions(Of TKey, TValue))
  name.vb: CreateConsumer(Of TKey, TValue)(ConsumerOptions(Of TKey, TValue))
- uid: Cheetah.Kafka.KafkaClientFactory.CreateConsumerBuilder``2(Cheetah.Kafka.ConsumerOptions{``0,``1})
  commentId: M:Cheetah.Kafka.KafkaClientFactory.CreateConsumerBuilder``2(Cheetah.Kafka.ConsumerOptions{``0,``1})
  id: CreateConsumerBuilder``2(Cheetah.Kafka.ConsumerOptions{``0,``1})
  parent: Cheetah.Kafka.KafkaClientFactory
  langs:
  - csharp
  - vb
  name: CreateConsumerBuilder<TKey, TValue>(ConsumerOptions<TKey, TValue>?)
  nameWithType: KafkaClientFactory.CreateConsumerBuilder<TKey, TValue>(ConsumerOptions<TKey, TValue>?)
  fullName: Cheetah.Kafka.KafkaClientFactory.CreateConsumerBuilder<TKey, TValue>(Cheetah.Kafka.ConsumerOptions<TKey, TValue>?)
  type: Method
  source:
    remote:
      path: src/Cheetah.Kafka/KafkaClientFactory.cs
      branch: main
      repo: https://github.com/KastTrifork/cheetah-lib-shared-dotnet
    id: CreateConsumerBuilder
    path: ../src/Cheetah.Kafka/KafkaClientFactory.cs
    startLine: 112
  assemblies:
  - Cheetah.Kafka
  namespace: Cheetah.Kafka
  summary: Creates a pre-configured <xref href="Confluent.Kafka.ConsumerBuilder%602" data-throw-if-not-resolved="false"></xref>/&gt;
  example: []
  syntax:
    content: public ConsumerBuilder<TKey, TValue> CreateConsumerBuilder<TKey, TValue>(ConsumerOptions<TKey, TValue>? consumerOptions = null)
    parameters:
    - id: consumerOptions
      type: Cheetah.Kafka.ConsumerOptions{{TKey},{TValue}}
      description: Optional consumer option used to modify the configuration
    typeParameters:
    - id: TKey
      description: The type of message key that the resulting consumer will consume
    - id: TValue
      description: The type of message value that the resulting consumer will consume
    return:
      type: Confluent.Kafka.ConsumerBuilder{{TKey},{TValue}}
      description: A pre-configured <xref href="Confluent.Kafka.IConsumer%602" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function CreateConsumerBuilder(Of TKey, TValue)(consumerOptions As ConsumerOptions(Of TKey, TValue) = Nothing) As ConsumerBuilder(Of TKey, TValue)
  overload: Cheetah.Kafka.KafkaClientFactory.CreateConsumerBuilder*
  nameWithType.vb: KafkaClientFactory.CreateConsumerBuilder(Of TKey, TValue)(ConsumerOptions(Of TKey, TValue))
  fullName.vb: Cheetah.Kafka.KafkaClientFactory.CreateConsumerBuilder(Of TKey, TValue)(Cheetah.Kafka.ConsumerOptions(Of TKey, TValue))
  name.vb: CreateConsumerBuilder(Of TKey, TValue)(ConsumerOptions(Of TKey, TValue))
- uid: Cheetah.Kafka.KafkaClientFactory.CreateAdminClient(Cheetah.Kafka.AdminClientOptions)
  commentId: M:Cheetah.Kafka.KafkaClientFactory.CreateAdminClient(Cheetah.Kafka.AdminClientOptions)
  id: CreateAdminClient(Cheetah.Kafka.AdminClientOptions)
  parent: Cheetah.Kafka.KafkaClientFactory
  langs:
  - csharp
  - vb
  name: CreateAdminClient(AdminClientOptions?)
  nameWithType: KafkaClientFactory.CreateAdminClient(AdminClientOptions?)
  fullName: Cheetah.Kafka.KafkaClientFactory.CreateAdminClient(Cheetah.Kafka.AdminClientOptions?)
  type: Method
  source:
    remote:
      path: src/Cheetah.Kafka/KafkaClientFactory.cs
      branch: main
      repo: https://github.com/KastTrifork/cheetah-lib-shared-dotnet
    id: CreateAdminClient
    path: ../src/Cheetah.Kafka/KafkaClientFactory.cs
    startLine: 139
  assemblies:
  - Cheetah.Kafka
  namespace: Cheetah.Kafka
  summary: Creates a pre-configured <xref href="Confluent.Kafka.IAdminClient" data-throw-if-not-resolved="false"></xref>/&gt;
  example: []
  syntax:
    content: public IAdminClient CreateAdminClient(AdminClientOptions? adminOptions = null)
    parameters:
    - id: adminOptions
      type: Cheetah.Kafka.AdminClientOptions
      description: Optional admin option to modify the used <xref href="Confluent.Kafka.AdminClientConfig" data-throw-if-not-resolved="false"></xref>
    return:
      type: Confluent.Kafka.IAdminClient
      description: A pre-configured <xref href="Confluent.Kafka.IAdminClient" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function CreateAdminClient(adminOptions As AdminClientOptions = Nothing) As IAdminClient
  overload: Cheetah.Kafka.KafkaClientFactory.CreateAdminClient*
  nameWithType.vb: KafkaClientFactory.CreateAdminClient(AdminClientOptions)
  fullName.vb: Cheetah.Kafka.KafkaClientFactory.CreateAdminClient(Cheetah.Kafka.AdminClientOptions)
  name.vb: CreateAdminClient(AdminClientOptions)
- uid: Cheetah.Kafka.KafkaClientFactory.CreateAdminClientBuilder(Cheetah.Kafka.AdminClientOptions)
  commentId: M:Cheetah.Kafka.KafkaClientFactory.CreateAdminClientBuilder(Cheetah.Kafka.AdminClientOptions)
  id: CreateAdminClientBuilder(Cheetah.Kafka.AdminClientOptions)
  parent: Cheetah.Kafka.KafkaClientFactory
  langs:
  - csharp
  - vb
  name: CreateAdminClientBuilder(AdminClientOptions?)
  nameWithType: KafkaClientFactory.CreateAdminClientBuilder(AdminClientOptions?)
  fullName: Cheetah.Kafka.KafkaClientFactory.CreateAdminClientBuilder(Cheetah.Kafka.AdminClientOptions?)
  type: Method
  source:
    remote:
      path: src/Cheetah.Kafka/KafkaClientFactory.cs
      branch: main
      repo: https://github.com/KastTrifork/cheetah-lib-shared-dotnet
    id: CreateAdminClientBuilder
    path: ../src/Cheetah.Kafka/KafkaClientFactory.cs
    startLine: 149
  assemblies:
  - Cheetah.Kafka
  namespace: Cheetah.Kafka
  summary: Creates a pre-configured <xref href="Confluent.Kafka.AdminClientBuilder" data-throw-if-not-resolved="false"></xref>/&gt;
  example: []
  syntax:
    content: public AdminClientBuilder CreateAdminClientBuilder(AdminClientOptions? adminOptions = null)
    parameters:
    - id: adminOptions
      type: Cheetah.Kafka.AdminClientOptions
      description: Optional admin option to modify the used <xref href="Confluent.Kafka.AdminClientConfig" data-throw-if-not-resolved="false"></xref>
    return:
      type: Confluent.Kafka.AdminClientBuilder
      description: A pre-configured <xref href="Confluent.Kafka.AdminClientBuilder" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function CreateAdminClientBuilder(adminOptions As AdminClientOptions = Nothing) As AdminClientBuilder
  overload: Cheetah.Kafka.KafkaClientFactory.CreateAdminClientBuilder*
  nameWithType.vb: KafkaClientFactory.CreateAdminClientBuilder(AdminClientOptions)
  fullName.vb: Cheetah.Kafka.KafkaClientFactory.CreateAdminClientBuilder(Cheetah.Kafka.AdminClientOptions)
  name.vb: CreateAdminClientBuilder(AdminClientOptions)
references:
- uid: Cheetah.Kafka
  commentId: N:Cheetah.Kafka
  href: Cheetah.html
  name: Cheetah.Kafka
  nameWithType: Cheetah.Kafka
  fullName: Cheetah.Kafka
  spec.csharp:
  - uid: Cheetah
    name: Cheetah
    href: Cheetah.html
  - name: .
  - uid: Cheetah.Kafka
    name: Kafka
    href: Cheetah.Kafka.html
  spec.vb:
  - uid: Cheetah
    name: Cheetah
    href: Cheetah.html
  - name: .
  - uid: Cheetah.Kafka
    name: Kafka
    href: Cheetah.Kafka.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Cheetah.Kafka.KafkaClientFactory
  commentId: T:Cheetah.Kafka.KafkaClientFactory
  parent: Cheetah.Kafka
  href: Cheetah.Kafka.KafkaClientFactory.html
  name: KafkaClientFactory
  nameWithType: KafkaClientFactory
  fullName: Cheetah.Kafka.KafkaClientFactory
- uid: Cheetah.Kafka.KafkaClientFactory.#ctor*
  commentId: Overload:Cheetah.Kafka.KafkaClientFactory.#ctor
  href: Cheetah.Kafka.KafkaClientFactory.html#Cheetah_Kafka_KafkaClientFactory__ctor_Cheetah_Auth_Authentication_ITokenService_Microsoft_Extensions_Logging_ILoggerFactory_Microsoft_Extensions_Options_IOptions_Cheetah_Kafka_Configuration_KafkaConfig__Cheetah_Kafka_ClientFactoryOptions_Cheetah_Kafka_Serdes_ISerializerProvider_Cheetah_Kafka_Serdes_IDeserializerProvider_
  name: KafkaClientFactory
  nameWithType: KafkaClientFactory.KafkaClientFactory
  fullName: Cheetah.Kafka.KafkaClientFactory.KafkaClientFactory
  nameWithType.vb: KafkaClientFactory.New
  fullName.vb: Cheetah.Kafka.KafkaClientFactory.New
  name.vb: New
- uid: Cheetah.Auth.Authentication.ITokenService
  commentId: T:Cheetah.Auth.Authentication.ITokenService
  parent: Cheetah.Auth.Authentication
  name: ITokenService
  nameWithType: ITokenService
  fullName: Cheetah.Auth.Authentication.ITokenService
- uid: Microsoft.Extensions.Logging.ILoggerFactory
  commentId: T:Microsoft.Extensions.Logging.ILoggerFactory
  parent: Microsoft.Extensions.Logging
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.iloggerfactory
  name: ILoggerFactory
  nameWithType: ILoggerFactory
  fullName: Microsoft.Extensions.Logging.ILoggerFactory
- uid: Microsoft.Extensions.Options.IOptions{Cheetah.Kafka.Configuration.KafkaConfig}
  commentId: T:Microsoft.Extensions.Options.IOptions{Cheetah.Kafka.Configuration.KafkaConfig}
  parent: Microsoft.Extensions.Options
  definition: Microsoft.Extensions.Options.IOptions`1
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.options.ioptions-1
  name: IOptions<KafkaConfig>
  nameWithType: IOptions<KafkaConfig>
  fullName: Microsoft.Extensions.Options.IOptions<Cheetah.Kafka.Configuration.KafkaConfig>
  nameWithType.vb: IOptions(Of KafkaConfig)
  fullName.vb: Microsoft.Extensions.Options.IOptions(Of Cheetah.Kafka.Configuration.KafkaConfig)
  name.vb: IOptions(Of KafkaConfig)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.options.ioptions-1
  - name: <
  - uid: Cheetah.Kafka.Configuration.KafkaConfig
    name: KafkaConfig
    href: Cheetah.Kafka.Configuration.KafkaConfig.html
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.options.ioptions-1
  - name: (
  - name: Of
  - name: " "
  - uid: Cheetah.Kafka.Configuration.KafkaConfig
    name: KafkaConfig
    href: Cheetah.Kafka.Configuration.KafkaConfig.html
  - name: )
- uid: Cheetah.Kafka.ClientFactoryOptions
  commentId: T:Cheetah.Kafka.ClientFactoryOptions
  parent: Cheetah.Kafka
  href: Cheetah.Kafka.ClientFactoryOptions.html
  name: ClientFactoryOptions
  nameWithType: ClientFactoryOptions
  fullName: Cheetah.Kafka.ClientFactoryOptions
- uid: Cheetah.Kafka.Serdes.ISerializerProvider
  commentId: T:Cheetah.Kafka.Serdes.ISerializerProvider
  parent: Cheetah.Kafka.Serdes
  href: Cheetah.Kafka.Serdes.ISerializerProvider.html
  name: ISerializerProvider
  nameWithType: ISerializerProvider
  fullName: Cheetah.Kafka.Serdes.ISerializerProvider
- uid: Cheetah.Kafka.Serdes.IDeserializerProvider
  commentId: T:Cheetah.Kafka.Serdes.IDeserializerProvider
  parent: Cheetah.Kafka.Serdes
  href: Cheetah.Kafka.Serdes.IDeserializerProvider.html
  name: IDeserializerProvider
  nameWithType: IDeserializerProvider
  fullName: Cheetah.Kafka.Serdes.IDeserializerProvider
- uid: Cheetah.Auth.Authentication
  commentId: N:Cheetah.Auth.Authentication
  name: Cheetah.Auth.Authentication
  nameWithType: Cheetah.Auth.Authentication
  fullName: Cheetah.Auth.Authentication
  spec.csharp:
  - uid: Cheetah
    name: Cheetah
  - name: .
  - uid: Cheetah.Auth
    name: Auth
  - name: .
  - uid: Cheetah.Auth.Authentication
    name: Authentication
  spec.vb:
  - uid: Cheetah
    name: Cheetah
  - name: .
  - uid: Cheetah.Auth
    name: Auth
  - name: .
  - uid: Cheetah.Auth.Authentication
    name: Authentication
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
- uid: Microsoft.Extensions.Options.IOptions`1
  commentId: T:Microsoft.Extensions.Options.IOptions`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.options.ioptions-1
  name: IOptions<TOptions>
  nameWithType: IOptions<TOptions>
  fullName: Microsoft.Extensions.Options.IOptions<TOptions>
  nameWithType.vb: IOptions(Of TOptions)
  fullName.vb: Microsoft.Extensions.Options.IOptions(Of TOptions)
  name.vb: IOptions(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.options.ioptions-1
  - name: <
  - name: TOptions
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.options.ioptions-1
  - name: (
  - name: Of
  - name: " "
  - name: TOptions
  - name: )
- uid: Microsoft.Extensions.Options
  commentId: N:Microsoft.Extensions.Options
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.Options
  nameWithType: Microsoft.Extensions.Options
  fullName: Microsoft.Extensions.Options
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Options
    name: Options
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.options
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Options
    name: Options
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.options
- uid: Cheetah.Kafka.Serdes
  commentId: N:Cheetah.Kafka.Serdes
  href: Cheetah.html
  name: Cheetah.Kafka.Serdes
  nameWithType: Cheetah.Kafka.Serdes
  fullName: Cheetah.Kafka.Serdes
  spec.csharp:
  - uid: Cheetah
    name: Cheetah
    href: Cheetah.html
  - name: .
  - uid: Cheetah.Kafka
    name: Kafka
    href: Cheetah.Kafka.html
  - name: .
  - uid: Cheetah.Kafka.Serdes
    name: Serdes
    href: Cheetah.Kafka.Serdes.html
  spec.vb:
  - uid: Cheetah
    name: Cheetah
    href: Cheetah.html
  - name: .
  - uid: Cheetah.Kafka
    name: Kafka
    href: Cheetah.Kafka.html
  - name: .
  - uid: Cheetah.Kafka.Serdes
    name: Serdes
    href: Cheetah.Kafka.Serdes.html
- uid: Confluent.Kafka.IProducer`2
  commentId: T:Confluent.Kafka.IProducer`2
  isExternal: true
  name: IProducer<TKey, TValue>
  nameWithType: IProducer<TKey, TValue>
  fullName: Confluent.Kafka.IProducer<TKey, TValue>
  nameWithType.vb: IProducer(Of TKey, TValue)
  fullName.vb: Confluent.Kafka.IProducer(Of TKey, TValue)
  name.vb: IProducer(Of TKey, TValue)
  spec.csharp:
  - uid: Confluent.Kafka.IProducer`2
    name: IProducer
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Confluent.Kafka.IProducer`2
    name: IProducer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Cheetah.Kafka.KafkaClientFactory.CreateProducer*
  commentId: Overload:Cheetah.Kafka.KafkaClientFactory.CreateProducer
  href: Cheetah.Kafka.KafkaClientFactory.html#Cheetah_Kafka_KafkaClientFactory_CreateProducer__2_Cheetah_Kafka_ProducerOptions___0___1__
  name: CreateProducer
  nameWithType: KafkaClientFactory.CreateProducer
  fullName: Cheetah.Kafka.KafkaClientFactory.CreateProducer
- uid: Cheetah.Kafka.ProducerOptions{{TKey},{TValue}}
  commentId: T:Cheetah.Kafka.ProducerOptions{``0,``1}
  parent: Cheetah.Kafka
  definition: Cheetah.Kafka.ProducerOptions`2
  href: Cheetah.Kafka.ProducerOptions-2.html
  name: ProducerOptions<TKey, TValue>
  nameWithType: ProducerOptions<TKey, TValue>
  fullName: Cheetah.Kafka.ProducerOptions<TKey, TValue>
  nameWithType.vb: ProducerOptions(Of TKey, TValue)
  fullName.vb: Cheetah.Kafka.ProducerOptions(Of TKey, TValue)
  name.vb: ProducerOptions(Of TKey, TValue)
  spec.csharp:
  - uid: Cheetah.Kafka.ProducerOptions`2
    name: ProducerOptions
    href: Cheetah.Kafka.ProducerOptions-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Cheetah.Kafka.ProducerOptions`2
    name: ProducerOptions
    href: Cheetah.Kafka.ProducerOptions-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Confluent.Kafka.IProducer{{TKey},{TValue}}
  commentId: T:Confluent.Kafka.IProducer{``0,``1}
  parent: Confluent.Kafka
  definition: Confluent.Kafka.IProducer`2
  name: IProducer<TKey, TValue>
  nameWithType: IProducer<TKey, TValue>
  fullName: Confluent.Kafka.IProducer<TKey, TValue>
  nameWithType.vb: IProducer(Of TKey, TValue)
  fullName.vb: Confluent.Kafka.IProducer(Of TKey, TValue)
  name.vb: IProducer(Of TKey, TValue)
  spec.csharp:
  - uid: Confluent.Kafka.IProducer`2
    name: IProducer
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Confluent.Kafka.IProducer`2
    name: IProducer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Cheetah.Kafka.ProducerOptions`2
  commentId: T:Cheetah.Kafka.ProducerOptions`2
  href: Cheetah.Kafka.ProducerOptions-2.html
  name: ProducerOptions<TKey, TValue>
  nameWithType: ProducerOptions<TKey, TValue>
  fullName: Cheetah.Kafka.ProducerOptions<TKey, TValue>
  nameWithType.vb: ProducerOptions(Of TKey, TValue)
  fullName.vb: Cheetah.Kafka.ProducerOptions(Of TKey, TValue)
  name.vb: ProducerOptions(Of TKey, TValue)
  spec.csharp:
  - uid: Cheetah.Kafka.ProducerOptions`2
    name: ProducerOptions
    href: Cheetah.Kafka.ProducerOptions-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Cheetah.Kafka.ProducerOptions`2
    name: ProducerOptions
    href: Cheetah.Kafka.ProducerOptions-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Confluent.Kafka
  commentId: N:Confluent.Kafka
  isExternal: true
  name: Confluent.Kafka
  nameWithType: Confluent.Kafka
  fullName: Confluent.Kafka
  spec.csharp:
  - uid: Confluent
    name: Confluent
    isExternal: true
  - name: .
  - uid: Confluent.Kafka
    name: Kafka
    isExternal: true
  spec.vb:
  - uid: Confluent
    name: Confluent
    isExternal: true
  - name: .
  - uid: Confluent.Kafka
    name: Kafka
    isExternal: true
- uid: Confluent.Kafka.ProducerBuilder`2
  commentId: T:Confluent.Kafka.ProducerBuilder`2
  isExternal: true
  name: ProducerBuilder<TKey, TValue>
  nameWithType: ProducerBuilder<TKey, TValue>
  fullName: Confluent.Kafka.ProducerBuilder<TKey, TValue>
  nameWithType.vb: ProducerBuilder(Of TKey, TValue)
  fullName.vb: Confluent.Kafka.ProducerBuilder(Of TKey, TValue)
  name.vb: ProducerBuilder(Of TKey, TValue)
  spec.csharp:
  - uid: Confluent.Kafka.ProducerBuilder`2
    name: ProducerBuilder
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Confluent.Kafka.ProducerBuilder`2
    name: ProducerBuilder
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Confluent.Kafka.IConsumer`2
  commentId: T:Confluent.Kafka.IConsumer`2
  isExternal: true
  name: IConsumer<TKey, TValue>
  nameWithType: IConsumer<TKey, TValue>
  fullName: Confluent.Kafka.IConsumer<TKey, TValue>
  nameWithType.vb: IConsumer(Of TKey, TValue)
  fullName.vb: Confluent.Kafka.IConsumer(Of TKey, TValue)
  name.vb: IConsumer(Of TKey, TValue)
  spec.csharp:
  - uid: Confluent.Kafka.IConsumer`2
    name: IConsumer
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Confluent.Kafka.IConsumer`2
    name: IConsumer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Cheetah.Kafka.KafkaClientFactory.CreateProducerBuilder*
  commentId: Overload:Cheetah.Kafka.KafkaClientFactory.CreateProducerBuilder
  href: Cheetah.Kafka.KafkaClientFactory.html#Cheetah_Kafka_KafkaClientFactory_CreateProducerBuilder__2_Cheetah_Kafka_ProducerOptions___0___1__
  name: CreateProducerBuilder
  nameWithType: KafkaClientFactory.CreateProducerBuilder
  fullName: Cheetah.Kafka.KafkaClientFactory.CreateProducerBuilder
- uid: Confluent.Kafka.ProducerBuilder{{TKey},{TValue}}
  commentId: T:Confluent.Kafka.ProducerBuilder{``0,``1}
  parent: Confluent.Kafka
  definition: Confluent.Kafka.ProducerBuilder`2
  name: ProducerBuilder<TKey, TValue>
  nameWithType: ProducerBuilder<TKey, TValue>
  fullName: Confluent.Kafka.ProducerBuilder<TKey, TValue>
  nameWithType.vb: ProducerBuilder(Of TKey, TValue)
  fullName.vb: Confluent.Kafka.ProducerBuilder(Of TKey, TValue)
  name.vb: ProducerBuilder(Of TKey, TValue)
  spec.csharp:
  - uid: Confluent.Kafka.ProducerBuilder`2
    name: ProducerBuilder
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Confluent.Kafka.ProducerBuilder`2
    name: ProducerBuilder
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Cheetah.Kafka.KafkaClientFactory.CreateConsumer*
  commentId: Overload:Cheetah.Kafka.KafkaClientFactory.CreateConsumer
  href: Cheetah.Kafka.KafkaClientFactory.html#Cheetah_Kafka_KafkaClientFactory_CreateConsumer__2_Cheetah_Kafka_ConsumerOptions___0___1__
  name: CreateConsumer
  nameWithType: KafkaClientFactory.CreateConsumer
  fullName: Cheetah.Kafka.KafkaClientFactory.CreateConsumer
- uid: Cheetah.Kafka.ConsumerOptions{{TKey},{TValue}}
  commentId: T:Cheetah.Kafka.ConsumerOptions{``0,``1}
  parent: Cheetah.Kafka
  definition: Cheetah.Kafka.ConsumerOptions`2
  href: Cheetah.Kafka.ConsumerOptions-2.html
  name: ConsumerOptions<TKey, TValue>
  nameWithType: ConsumerOptions<TKey, TValue>
  fullName: Cheetah.Kafka.ConsumerOptions<TKey, TValue>
  nameWithType.vb: ConsumerOptions(Of TKey, TValue)
  fullName.vb: Cheetah.Kafka.ConsumerOptions(Of TKey, TValue)
  name.vb: ConsumerOptions(Of TKey, TValue)
  spec.csharp:
  - uid: Cheetah.Kafka.ConsumerOptions`2
    name: ConsumerOptions
    href: Cheetah.Kafka.ConsumerOptions-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Cheetah.Kafka.ConsumerOptions`2
    name: ConsumerOptions
    href: Cheetah.Kafka.ConsumerOptions-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Confluent.Kafka.IConsumer{{TKey},{TValue}}
  commentId: T:Confluent.Kafka.IConsumer{``0,``1}
  parent: Confluent.Kafka
  definition: Confluent.Kafka.IConsumer`2
  name: IConsumer<TKey, TValue>
  nameWithType: IConsumer<TKey, TValue>
  fullName: Confluent.Kafka.IConsumer<TKey, TValue>
  nameWithType.vb: IConsumer(Of TKey, TValue)
  fullName.vb: Confluent.Kafka.IConsumer(Of TKey, TValue)
  name.vb: IConsumer(Of TKey, TValue)
  spec.csharp:
  - uid: Confluent.Kafka.IConsumer`2
    name: IConsumer
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Confluent.Kafka.IConsumer`2
    name: IConsumer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Cheetah.Kafka.ConsumerOptions`2
  commentId: T:Cheetah.Kafka.ConsumerOptions`2
  href: Cheetah.Kafka.ConsumerOptions-2.html
  name: ConsumerOptions<TKey, TValue>
  nameWithType: ConsumerOptions<TKey, TValue>
  fullName: Cheetah.Kafka.ConsumerOptions<TKey, TValue>
  nameWithType.vb: ConsumerOptions(Of TKey, TValue)
  fullName.vb: Cheetah.Kafka.ConsumerOptions(Of TKey, TValue)
  name.vb: ConsumerOptions(Of TKey, TValue)
  spec.csharp:
  - uid: Cheetah.Kafka.ConsumerOptions`2
    name: ConsumerOptions
    href: Cheetah.Kafka.ConsumerOptions-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Cheetah.Kafka.ConsumerOptions`2
    name: ConsumerOptions
    href: Cheetah.Kafka.ConsumerOptions-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Confluent.Kafka.ConsumerBuilder`2
  commentId: T:Confluent.Kafka.ConsumerBuilder`2
  isExternal: true
  name: ConsumerBuilder<TKey, TValue>
  nameWithType: ConsumerBuilder<TKey, TValue>
  fullName: Confluent.Kafka.ConsumerBuilder<TKey, TValue>
  nameWithType.vb: ConsumerBuilder(Of TKey, TValue)
  fullName.vb: Confluent.Kafka.ConsumerBuilder(Of TKey, TValue)
  name.vb: ConsumerBuilder(Of TKey, TValue)
  spec.csharp:
  - uid: Confluent.Kafka.ConsumerBuilder`2
    name: ConsumerBuilder
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Confluent.Kafka.ConsumerBuilder`2
    name: ConsumerBuilder
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Cheetah.Kafka.KafkaClientFactory.CreateConsumerBuilder*
  commentId: Overload:Cheetah.Kafka.KafkaClientFactory.CreateConsumerBuilder
  href: Cheetah.Kafka.KafkaClientFactory.html#Cheetah_Kafka_KafkaClientFactory_CreateConsumerBuilder__2_Cheetah_Kafka_ConsumerOptions___0___1__
  name: CreateConsumerBuilder
  nameWithType: KafkaClientFactory.CreateConsumerBuilder
  fullName: Cheetah.Kafka.KafkaClientFactory.CreateConsumerBuilder
- uid: Confluent.Kafka.ConsumerBuilder{{TKey},{TValue}}
  commentId: T:Confluent.Kafka.ConsumerBuilder{``0,``1}
  parent: Confluent.Kafka
  definition: Confluent.Kafka.ConsumerBuilder`2
  name: ConsumerBuilder<TKey, TValue>
  nameWithType: ConsumerBuilder<TKey, TValue>
  fullName: Confluent.Kafka.ConsumerBuilder<TKey, TValue>
  nameWithType.vb: ConsumerBuilder(Of TKey, TValue)
  fullName.vb: Confluent.Kafka.ConsumerBuilder(Of TKey, TValue)
  name.vb: ConsumerBuilder(Of TKey, TValue)
  spec.csharp:
  - uid: Confluent.Kafka.ConsumerBuilder`2
    name: ConsumerBuilder
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Confluent.Kafka.ConsumerBuilder`2
    name: ConsumerBuilder
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Confluent.Kafka.IAdminClient
  commentId: T:Confluent.Kafka.IAdminClient
  parent: Confluent.Kafka
  isExternal: true
  name: IAdminClient
  nameWithType: IAdminClient
  fullName: Confluent.Kafka.IAdminClient
- uid: Confluent.Kafka.AdminClientConfig
  commentId: T:Confluent.Kafka.AdminClientConfig
  isExternal: true
  name: AdminClientConfig
  nameWithType: AdminClientConfig
  fullName: Confluent.Kafka.AdminClientConfig
- uid: Cheetah.Kafka.KafkaClientFactory.CreateAdminClient*
  commentId: Overload:Cheetah.Kafka.KafkaClientFactory.CreateAdminClient
  href: Cheetah.Kafka.KafkaClientFactory.html#Cheetah_Kafka_KafkaClientFactory_CreateAdminClient_Cheetah_Kafka_AdminClientOptions_
  name: CreateAdminClient
  nameWithType: KafkaClientFactory.CreateAdminClient
  fullName: Cheetah.Kafka.KafkaClientFactory.CreateAdminClient
- uid: Cheetah.Kafka.AdminClientOptions
  commentId: T:Cheetah.Kafka.AdminClientOptions
  parent: Cheetah.Kafka
  href: Cheetah.Kafka.AdminClientOptions.html
  name: AdminClientOptions
  nameWithType: AdminClientOptions
  fullName: Cheetah.Kafka.AdminClientOptions
- uid: Confluent.Kafka.AdminClientBuilder
  commentId: T:Confluent.Kafka.AdminClientBuilder
  parent: Confluent.Kafka
  isExternal: true
  name: AdminClientBuilder
  nameWithType: AdminClientBuilder
  fullName: Confluent.Kafka.AdminClientBuilder
- uid: Cheetah.Kafka.KafkaClientFactory.CreateAdminClientBuilder*
  commentId: Overload:Cheetah.Kafka.KafkaClientFactory.CreateAdminClientBuilder
  href: Cheetah.Kafka.KafkaClientFactory.html#Cheetah_Kafka_KafkaClientFactory_CreateAdminClientBuilder_Cheetah_Kafka_AdminClientOptions_
  name: CreateAdminClientBuilder
  nameWithType: KafkaClientFactory.CreateAdminClientBuilder
  fullName: Cheetah.Kafka.KafkaClientFactory.CreateAdminClientBuilder
