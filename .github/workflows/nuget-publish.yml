name: "Publish nuget package"
on:
  workflow_call:
    inputs:
      project_filepath:
        type: string
        required: true
        description: "file path to .csproj file"
      dotnet_version:
        type: string
        default: "6.0"
        description: "6.0 or 7.x"
        required: true
      releasenotes_path:
        type: string
        description: ""
        required: true
      kamstrup_gitlab_token:
        type: string
        description: ""
        required: true
    secrets:
      gh_token:
        required: true
  
jobs:
  nuget-publish:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "dotnet build"
        uses: trifork/cheetah-infrastructure-utils/.github/actions/build-dotnet@main
        with:
          read_package_pat: ${{ secrets.gh_token }}
          dotnet-version: ${{ inputs.dotnet_version }}
          github_actor: ${{ github.actor }}
          solution_filepath: ${{ inputs.project_filepath }}
          silent: "true"

      - name: "create output-folder"
        shell: bash
        run: mkdir -p output

      # requires <VersionPrefix> in csproj
      - name: Extract NuGet package metadata
        id: get_metadata
        shell: bash
        run: |
          VERSION=$(cat ${{ inputs.project_filepath }} | grep "<VersionPrefix>" | sed 's/<\/\?VersionPrefix>//g' | tr -d "[:space:]")
          PACKAGE_NAME=$(cat ${{inputs.project_filepath }} | grep "<PackageId>" | sed 's/<\/\?PackageId>//g' | tr -d "[:space:]")
          echo "Extracted NuGet package version: $VERSION"
          echo "Extracted NuGet package name: $PACKAGE_NAME"
          echo "NUGET_PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "NUGET_PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "PACKAGE_EXISTS=true" >> $GITHUB_ENV

      - name: Check if package with same version exists
        id: check_existing_package
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
        run: |
          response=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token $GITHUB_TOKEN" -o /dev/null -w "%{http_code}" "https://api.github.com/orgs/trifork/packages/nuget/${{ env.NUGET_PACKAGE_NAME }}/versions")
          if [[ $response == 404 ]]; then
            echo "Package not found"
            echo "PACKAGE_EXISTS=false" >> $GITHUB_ENV
          else
            PACKAGE_EXISTS=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/orgs/trifork/packages/nuget/${{ env.NUGET_PACKAGE_NAME }}/versions" | jq ".[] | select(.name==\"${{ env.NUGET_PACKAGE_VERSION }}\") | .name" | wc -l)
            echo "Number of matching packages: $PACKAGE_EXISTS"
            if [ $PACKAGE_EXISTS -eq 0 ]; then
              echo "No existing package with the same version found."
              echo "PACKAGE_EXISTS=false" >> $GITHUB_ENV
            fi
          fi

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: "Create main release name"
        shell: bash
        if: github.ref == 'refs/heads/main'
        run: |
          echo "IS_PRERELEASE=false" >> $GITHUB_ENV
          echo "DOTNET_PACK_ARGS=/p:PackageVersion="${{ env.NUGET_PACKAGE_VERSION }}" -c Release" >> $GITHUB_ENV

      - name: "Create branch release name"
        shell: bash
        if: github.ref != 'refs/heads/main'
        run: |
          VERSION_SUFFIX="${{ env.GITHUB_REF_SLUG }}-${{ github.run_number }}"
          echo "IS_PRERELEASE=true" >> $GITHUB_ENV
          echo "NUGET_PACKAGE_VERSION=${{ env.NUGET_PACKAGE_VERSION }}-$VERSION_SUFFIX" >> $GITHUB_ENV
          echo "DOTNET_PACK_ARGS=--version-suffix ${VERSION_SUFFIX} -c Release --property Repository" >> $GITHUB_ENV

      - name: "Set release name"
        shell: bash
        run: |
          echo "PACKAGE_RELEASE_NAME=${{ env.NUGET_PACKAGE_NAME }}-v${{ env.NUGET_PACKAGE_VERSION }}" >> $GITHUB_ENV

      - name: "Package"
        shell: pwsh
        run: |
          ./scripts/Fat-Pack.ps1 -ProjectPath ${{ inputs.project_filepath }} -DestinationPath output -DotnetPackArgs "${{ env.DOTNET_PACK_ARGS }}"

      - name: "Publish to github packages"
        if: env.PACKAGE_EXISTS == 'false' || github.ref != 'refs/heads/main'
        shell: bash
        run: dotnet nuget push output/${{ env.NUGET_PACKAGE_NAME }}*.nupkg --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --api-key ${{ secrets.gh_token }}

      - name: "Publish to Kamstrup Gitlab"
        if: env.PACKAGE_EXISTS == 'false' && github.ref == 'refs/heads/main'
        shell: bash
        run: |
          dotnet nuget add source "https://gitlab.com/api/v4/projects/45237329/packages/nuget/index.json" --name gitlab --username trifork --password ${{ inputs.kamstrup_gitlab_token }} --store-password-in-clear-text
          dotnet nuget push output/${{ env.NUGET_PACKAGE_NAME }}*.nupkg --source gitlab

      - name: "Create release"
        if: env.PACKAGE_EXISTS == 'false' && github.ref == 'refs/heads/main'
        uses: "actions/github-script@v6"
        env:
          releasenotes_path: "${{ inputs.releasenotes_path }}"
        with:
          github-token: "${{ secrets.gh_token }}"
          script: |
            try {
              const fs = require('fs')
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                body: fs.readFileSync(process.env.releasenotes_path, 'utf8'),
                name: "Release " + process.env.PACKAGE_RELEASE_NAME,
                owner: context.repo.owner,
                prerelease: (process.env.IS_PRERELEASE == "true" ? true : false),
                repo: context.repo.repo,
                tag_name: process.env.PACKAGE_RELEASE_NAME,
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: "Generate SBOM"
        if: github.ref == 'refs/heads/main'
        run: docker run --rm -v /tmp:/tmp -v $(pwd):/app:rw -e FETCH_LICENSE=true -t ghcr.io/cyclonedx/cdxgen -r /app/src/Cheetah.Componenttest -o /app/src/Cheetah.Componenttest/sbom.json -t dotnet

      - name: Upload asset to github release page
        id: upload-release-asset
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ./src/Cheetah.Componenttest/sbom.json
          asset_name: sbom.json
          asset_content_type: application/json
