name: Publish docfx

on:
  workflow_dispatch:
    inputs:
      project:
        description: Which project to create a release branch for
        required: true
        type: choice
        options:
          - Cheetah.Kafka
          - Cheetah.OpenSearch
          - Cheetah.SchemaRegistry
  workflow_run:
    workflows:
      - .NET Create Release
    types:
      - completed

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  publish-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "dotnet build"
        uses: kasttrifork/cheetah-infrastructure-utils/.github/actions/dotnet/dotnet-build@main

      - name: Build docfx
        uses: kasttrifork/cheetah-infrastructure-utils/.github/actions/docfx/docfx-build@main

      - name: Get csproj filepath
        id: get-csproj-filepath
        uses: kasttrifork/cheetah-infrastructure-utils/.github/actions/get-from-map@main
        with:
          file-path: ./.github/csproj-filepaths.yaml
          key: ${{inputs.project}}

      - name: Get project version
        id: get-version
        uses: trifork/cheetah-infrastructure-utils-workflows/.github/actions/versioning/get-version@main
        with:
          file-path: ${{ steps.get-csproj-filepath.outputs.value }}
          prefix: "<VersionPrefix>"
          suffix: "</VersionPrefix>"

      - name: create public/
        run: |
          mkdir -p public/
          mv docs/ public/_source
          mv src/ public/src
          mv .gitignore public/.gitignore
          rm public/_source/api/.gitignore
          mv _site/ public/docs

      - name: Deploy to GitHub Pages for project ${{ inputs.project }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public/_source/articles/${{ inputs.project }}/
          exclude_assets: ""
          destination_dir: _source/articles/${{inputs.project}}/v${{ steps.get-version.outputs.version }}

      - name: Deploy to GitHub Pages for project ${{ inputs.project }} to latest folder
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public/_source/articles/${{ inputs.project }}/
          exclude_assets: ""
          destination_dir: _source/articles/${{inputs.project}}/latest/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          exclude_assets: './public/_source/articles/'
          keep_files: true

      - name: Update toc file with new version v${{ steps.get-version.outputs.version }}
        id: update-toc
        uses: kasttrifork/cheetah-infrastructure-utils/.github/actions/update-toc@main
        with:
          toc-file: docs/articles/Cheetah.Kafka/toc.yml
          version: ${{ steps.get-version.outputs.version }}
          repo-name: ${{ github.repository }}

      - name: Commit changes to toc.yml
        uses: EndBug/add-and-commit@v9
        with:
          commit: -a
          message:  "Update toc file with new version v${{ steps.get-version.outputs.version }}"

      - name: create toc-folder/
        run: |
          mkdir -p toc-folder/
          mv docs/articles/Cheetah.Kafka/toc.yml toc-folder/

      - name: Deploy toc.yml to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./toc-folder/
          commit_message: "Update toc file with new version v${{ steps.get-version.outputs.version }}"
          keep_files: true

     # - name: Repository Dispatch
     #   uses: peter-evans/repository-dispatch@v3
      #  with:
       #   token: ${{ secrets.READ_PACKAGE_PAT }}
        #  repository: trifork/cheetah-artifact-documentation
         # event-type: docs-update
          #client-payload: '{"version": "${{ steps.get-version.outputs.version }}, repoName": "${{ github.repository }}"}'
