name: Publish docfx

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
      file:
        required: true
        type: string

  workflow_dispatch:
    inputs:
      project:
        description: "The project to update the toc file for"
        type: choice
        options:
          - Cheetah.Kafka
          - Cheetah.OpenSearch
          - Cheetah.SchemaRegistry
      file:
        description: "Path to the toc file"
        type: choice
        options:
          - .github/toc-files/articles/toc.yml
          - .github/toc-files/api/toc.yml

  workflow_run:
    workflows:
      - .NET Create Release
    types:
      - completed

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  publish-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get value
        id: get-csproj-filepath
        shell: bash
        run: echo "value=$(grep -Po '(?<=${{inputs.project}}:).*' ./.github/csproj-filepaths.yaml | awk '{$1=$1};1')" >> $GITHUB_OUTPUT

      - name: Get project version
        id: get-version
        uses: trifork/cheetah-infrastructure-utils-workflows/.github/actions/versioning/get-version@main
        with:
          file-path: ${{ steps.get-csproj-filepath.outputs.value }}
          prefix: "<VersionPrefix>"
          suffix: "</VersionPrefix>"

      - name: get directory
        run: |
            # Function to extract the desired part
            extract_part() {
              local input="$1"
              echo "$input" | awk -F'/' '{print $(NF-1)}'
            }

            # Extracting from string
            dir=$(extract_part "${{ inputs.file }}")

            echo $dir
            echo "directory=$dir" >> $GITHUB_ENV

      - name: Update toc file with new version v${{ steps.get-version.outputs.version }}
        id: update-toc
        uses: trifork/cheetah-infrastructure-utils/.github/actions/update-toc@main
        with:
          toc-file: ${{ inputs.file }}
          version: ${{ steps.get-version.outputs.version }}
          repo-name: ${{ inputs.project }}
          directory: ${{ env.directory }}

      - name: Create Pull Request
        id: cpr
        if: ${{steps.update-toc.outputs.updated == 'true'}}
        uses: peter-evans/create-pull-request@v7.0.5
        with:
          commit-message: "Update toc file with new version v${{ env.version }} for ${{ inputs.project }}"
          sign-commits: true
          title: "Update toc file with new version v${{ env.version }} for ${{ inputs.project }}"
          labels: "automated"
          token: ${{ secrets.WRITE_PACKAGE_PAT }}
          branch-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable Pull Request Automerge
        if: ${{steps.update-toc.outputs.updated == 'true'}}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          token: ${{ secrets.WRITE_PACKAGE_PAT }}
          merge-method: squash

      - uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
            ${{ runner.os }}-nuget-

      - name: "dotnet build"
        shell: bash
        run: |
          dotnet build --verbosity minimal --configuration Release /nowarn:cs1591

      - name: Build docfx
        continue-on-error: true
        uses: trifork/cheetah-infrastructure-utils/.github/actions/docfx/docfx-build@main

      - name: create public/
        run: |
          mkdir -p public/
          mv docs/ public/_source
          mv src/ public/src
          mv .gitignore public/.gitignore
          rm public/_source/api/.gitignore
          rm public/_source/${{env.directory}}/toc.yml
          mv _site/ public/docs

      - name: Deploy to GitHub Pages for project ${{ inputs.project }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public/_source/${{env.directory}}/${{ inputs.project }}/
          exclude_assets: ""
          destination_dir: _source/${{env.directory}}/${{inputs.project}}/v${{ env.version }}
          keep_files: true
          commit_message: "Update documentation with new version v${{ env.version }} for ${{ inputs.project }}"

      - name: create toc/
        run: |
          mkdir -p toc/
          mv ${{ inputs.file }} toc/

      - name: Deploy updated toc file to GitHub Pages for project ${{ inputs.project }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./toc/
          exclude_assets: ""
          commit_message: "Update toc file with new version v${{ env.version }} for ${{ inputs.project }}"
          destination_dir: _source/${{env.directory}}/
          keep_files: true

      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.READ_PACKAGE_PAT }}
          repository: trifork/cheetah-artifact-documentation
          event-type: docs-update