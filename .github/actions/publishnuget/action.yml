name: "Publish nuget package"
description: "Will only push if the VersionPrefix is not already published."

inputs:
  project_filepath:
    description: "file path to .csproj file"
    required: true
  dotnet-version:
    description: "6.0 or 7.x"
    default: "6.0"
    required: true
  package_name:
    description: "Package name."
    required: true
  github_token:
    description: ""
    required: true
  releasenotes_path:
    description: ""
    required: true

runs:
  using: composite
  steps:
    - name: "Checkout"
      uses: actions/checkout@v3

    - name: "dotnet build"
      uses: trifork/cheetah-infrastructure-utils/.github/actions/build-dotnet@main
      with:
        read_package_pat: ${{ inputs.github_token }}
        project_path: ${{ env.PROJECT_PATH }}
        dotnet-version: "6.0"
        github_actor: ${{ github.actor }}
        solution_filepath: ${{ env.SOLUTION_FILEPATH }}

    - name: "create output-folder"
      shell: bash
      run: mkdir -p output

    # requires <VersionPrefix> in csproj
    - name: Extract NuGet package version
      id: get_version
      shell: bash
      run: |
        VERSION=$(cat ${{ inputs.project_filepath }} | grep "<VersionPrefix>" | sed 's/<\/\?VersionPrefix>//g' | tr -d "[:space:]")
        echo "Extracted NuGet package version: $VERSION"
        echo "NUGET_PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "PACKAGE_RELEASE_NAME=${{ inputs.package_name }}-v$VERSION" >> $GITHUB_ENV

    - name: Check if package with same version exists
      id: check_existing_package
      shell: bash
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        PACKAGE_EXISTS=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/orgs/trifork/packages/nuget/${{ inputs.package_name }}/versions" | jq ".[] | select(.version==\"${{ env.NUGET_PACKAGE_VERSION }}\") | .name" | wc -l)
        echo "Number of matching packages: $PACKAGE_EXISTS"
        if [ $PACKAGE_EXISTS -eq 0 ]; then
          echo "No existing package with the same version found."
          echo "PACKAGE_EXISTS=false" >> $GITHUB_ENV
        else
          echo "An existing package with the same version found."
          echo "PACKAGE_EXISTS=true" >> $GITHUB_ENV
        fi

    - name: "package with version"
      shell: bash
      if: github.ref == 'refs/heads/main'
      run: |
        echo "IS_PRERELEASE=false" >> $GITHUB_ENV
        dotnet pack --no-build -o output /p:PackageVersion="${{ env.NUGET_PACKAGE_VERSION }}" -c Release ${{ inputs.project_filepath }}

    - name: "package with suffix"
      shell: bash
      if: github.ref != 'refs/heads/main'
      run: |
        echo "IS_PRERELEASE=true" >> $GITHUB_ENV
        dotnet pack --no-build --version-suffix ${{ github.run_number }} -o output -c Release ${{ inputs.project_filepath }}

    - name: Read release notes
      shell: bash
      id: read_release_notes
      run: |
        RELEASE_NOTES=$(cat ${{ inputs.releasenotes_path }})
        echo "RELEASE_NOTES=${RELEASE_NOTES}" >> $GITHUB_ENV

    - name: "Publish to github packages"
      if: env.PACKAGE_EXISTS == 'false'
      shell: bash
      run: dotnet nuget push output/${{ inputs.package_name }}*.nupkg --skip-duplicate --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --api-key ${{ inputs.github_token }} --property ReleaseNotes="${{ env.RELEASE_NOTES }}

    - name: "Create release"
      #&& github.ref == 'refs/heads/main'
      if: env.PACKAGE_EXISTS == 'false'
      uses: "actions/github-script@v6"
      with:
        github-token: "${{ inputs.github_token }}"
        script: |
          try {
            const response = await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              body: process.env.RELEASE_NOTES
              name: "Release " + process.env.PACKAGE_RELEASE_NAME,
              owner: context.repo.owner,
              prerelease: process.env.IS_PRERELEASE,
              repo: context.repo.repo,
              tag_name: process.env.NUGET_PACKAGE_VERSION,
            });

            core.exportVariable('RELEASE_ID', response.data.id);
            core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
          } catch (error) {
            core.setFailed(error.message);
          }
