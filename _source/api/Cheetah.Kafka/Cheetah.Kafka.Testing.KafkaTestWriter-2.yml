### YamlMime:ManagedReference
items:
- uid: Cheetah.Kafka.Testing.KafkaTestWriter`2
  commentId: T:Cheetah.Kafka.Testing.KafkaTestWriter`2
  id: KafkaTestWriter`2
  parent: Cheetah.Kafka.Testing
  children:
  - Cheetah.Kafka.Testing.KafkaTestWriter`2.WriteAsync(Confluent.Kafka.Message{`0,`1}[])
  - Cheetah.Kafka.Testing.KafkaTestWriter`2.WriteAsync(`1[])
  langs:
  - csharp
  - vb
  name: KafkaTestWriter<TKey, T>
  nameWithType: KafkaTestWriter<TKey, T>
  fullName: Cheetah.Kafka.Testing.KafkaTestWriter<TKey, T>
  type: Class
  source:
    remote:
      path: src/Cheetah.Kafka/Testing/KafkaTestWriter.cs
      branch: main
      repo: https://github.com/trifork/cheetah-lib-shared-dotnet
    id: KafkaTestWriter
    path: ../src/Cheetah.Kafka/Testing/KafkaTestWriter.cs
    startLine: 25
  assemblies:
  - Cheetah.Kafka
  namespace: Cheetah.Kafka.Testing
  summary: A simple Kafka client used to write messages to a Kafka topic.
  remarks: This should only be used for testing purposes, and has no performance guarantees.
  example: []
  syntax:
    content: 'public class KafkaTestWriter<TKey, T> : IKafkaTestWriter<TKey, T>'
    typeParameters:
    - id: TKey
      description: The type of key to produce
    - id: T
      description: The type of value to produce
    content.vb: Public Class KafkaTestWriter(Of TKey, T) Implements IKafkaTestWriter(Of TKey, T)
  inheritance:
  - System.Object
  implements:
  - Cheetah.Kafka.Testing.IKafkaTestWriter{{TKey},{T}}
  nameWithType.vb: KafkaTestWriter(Of TKey, T)
  fullName.vb: Cheetah.Kafka.Testing.KafkaTestWriter(Of TKey, T)
  name.vb: KafkaTestWriter(Of TKey, T)
- uid: Cheetah.Kafka.Testing.KafkaTestWriter`2.WriteAsync(`1[])
  commentId: M:Cheetah.Kafka.Testing.KafkaTestWriter`2.WriteAsync(`1[])
  id: WriteAsync(`1[])
  parent: Cheetah.Kafka.Testing.KafkaTestWriter`2
  langs:
  - csharp
  - vb
  name: WriteAsync(params T[])
  nameWithType: KafkaTestWriter<TKey, T>.WriteAsync(params T[])
  fullName: Cheetah.Kafka.Testing.KafkaTestWriter<TKey, T>.WriteAsync(params T[])
  type: Method
  source:
    remote:
      path: src/Cheetah.Kafka/Testing/KafkaTestWriter.cs
      branch: main
      repo: https://github.com/trifork/cheetah-lib-shared-dotnet
    id: WriteAsync
    path: ../src/Cheetah.Kafka/Testing/KafkaTestWriter.cs
    startLine: 47
  assemblies:
  - Cheetah.Kafka
  namespace: Cheetah.Kafka.Testing
  summary: Publishes multiple messages to Kafka
  example: []
  syntax:
    content: >-
      [Obsolete("Using a keyFunction is deprecated, please use the method taking 'param Message<TKey, T>' as argument instead.")]

      public Task<DeliveryResult<TKey, T>[]> WriteAsync(params T[] messages)
    parameters:
    - id: messages
      type: '{T}[]'
      description: The collection of messages to publish
    return:
      type: System.Threading.Tasks.Task{Confluent.Kafka.DeliveryResult{{TKey},{T}}[]}
    content.vb: >-
      <Obsolete("Using a keyFunction is deprecated, please use the method taking 'param Message<TKey, T>' as argument instead.")>

      Public Function WriteAsync(ParamArray messages As T()) As Task(Of DeliveryResult(Of TKey, T)())
  overload: Cheetah.Kafka.Testing.KafkaTestWriter`2.WriteAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the provided collection of messages is empty
  implements:
  - Cheetah.Kafka.Testing.IKafkaTestWriter{{TKey},{T}}.WriteAsync({T}[])
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Using a keyFunction is deprecated, please use the method taking 'param Message<TKey, T>' as argument instead.
  nameWithType.vb: KafkaTestWriter(Of TKey, T).WriteAsync(ParamArray T())
  fullName.vb: Cheetah.Kafka.Testing.KafkaTestWriter(Of TKey, T).WriteAsync(ParamArray T())
  name.vb: WriteAsync(ParamArray T())
- uid: Cheetah.Kafka.Testing.KafkaTestWriter`2.WriteAsync(Confluent.Kafka.Message{`0,`1}[])
  commentId: M:Cheetah.Kafka.Testing.KafkaTestWriter`2.WriteAsync(Confluent.Kafka.Message{`0,`1}[])
  id: WriteAsync(Confluent.Kafka.Message{`0,`1}[])
  parent: Cheetah.Kafka.Testing.KafkaTestWriter`2
  langs:
  - csharp
  - vb
  name: WriteAsync(params Message<TKey, T>[])
  nameWithType: KafkaTestWriter<TKey, T>.WriteAsync(params Message<TKey, T>[])
  fullName: Cheetah.Kafka.Testing.KafkaTestWriter<TKey, T>.WriteAsync(params Confluent.Kafka.Message<TKey, T>[])
  type: Method
  source:
    remote:
      path: src/Cheetah.Kafka/Testing/KafkaTestWriter.cs
      branch: main
      repo: https://github.com/trifork/cheetah-lib-shared-dotnet
    id: WriteAsync
    path: ../src/Cheetah.Kafka/Testing/KafkaTestWriter.cs
    startLine: 74
  assemblies:
  - Cheetah.Kafka
  namespace: Cheetah.Kafka.Testing
  summary: Publishes multiple messages to Kafka
  example: []
  syntax:
    content: public Task<DeliveryResult<TKey, T>[]> WriteAsync(params Message<TKey, T>[] messages)
    parameters:
    - id: messages
      type: Confluent.Kafka.Message{{TKey},{T}}[]
      description: The collection of messages to publish
    return:
      type: System.Threading.Tasks.Task{Confluent.Kafka.DeliveryResult{{TKey},{T}}[]}
    content.vb: Public Function WriteAsync(ParamArray messages As Message(Of TKey, T)()) As Task(Of DeliveryResult(Of TKey, T)())
  overload: Cheetah.Kafka.Testing.KafkaTestWriter`2.WriteAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the provided collection of messages is empty
  implements:
  - Cheetah.Kafka.Testing.IKafkaTestWriter{{TKey},{T}}.WriteAsync(Confluent.Kafka.Message{{TKey},{T}}[])
  nameWithType.vb: KafkaTestWriter(Of TKey, T).WriteAsync(ParamArray Message(Of TKey, T)())
  fullName.vb: Cheetah.Kafka.Testing.KafkaTestWriter(Of TKey, T).WriteAsync(ParamArray Confluent.Kafka.Message(Of TKey, T)())
  name.vb: WriteAsync(ParamArray Message(Of TKey, T)())
references:
- uid: Cheetah.Kafka.Testing
  commentId: N:Cheetah.Kafka.Testing
  href: Cheetah.html
  name: Cheetah.Kafka.Testing
  nameWithType: Cheetah.Kafka.Testing
  fullName: Cheetah.Kafka.Testing
  spec.csharp:
  - uid: Cheetah
    name: Cheetah
    href: Cheetah.html
  - name: .
  - uid: Cheetah.Kafka
    name: Kafka
    href: Cheetah.Kafka.html
  - name: .
  - uid: Cheetah.Kafka.Testing
    name: Testing
    href: Cheetah.Kafka.Testing.html
  spec.vb:
  - uid: Cheetah
    name: Cheetah
    href: Cheetah.html
  - name: .
  - uid: Cheetah.Kafka
    name: Kafka
    href: Cheetah.Kafka.html
  - name: .
  - uid: Cheetah.Kafka.Testing
    name: Testing
    href: Cheetah.Kafka.Testing.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Cheetah.Kafka.Testing.IKafkaTestWriter{{TKey},{T}}
  commentId: T:Cheetah.Kafka.Testing.IKafkaTestWriter{``0,``1}
  parent: Cheetah.Kafka.Testing
  definition: Cheetah.Kafka.Testing.IKafkaTestWriter`2
  href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html
  name: IKafkaTestWriter<TKey, T>
  nameWithType: IKafkaTestWriter<TKey, T>
  fullName: Cheetah.Kafka.Testing.IKafkaTestWriter<TKey, T>
  nameWithType.vb: IKafkaTestWriter(Of TKey, T)
  fullName.vb: Cheetah.Kafka.Testing.IKafkaTestWriter(Of TKey, T)
  name.vb: IKafkaTestWriter(Of TKey, T)
  spec.csharp:
  - uid: Cheetah.Kafka.Testing.IKafkaTestWriter`2
    name: IKafkaTestWriter
    href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  spec.vb:
  - uid: Cheetah.Kafka.Testing.IKafkaTestWriter`2
    name: IKafkaTestWriter
    href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Cheetah.Kafka.Testing.IKafkaTestWriter`2
  commentId: T:Cheetah.Kafka.Testing.IKafkaTestWriter`2
  href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html
  name: IKafkaTestWriter<TKey, T>
  nameWithType: IKafkaTestWriter<TKey, T>
  fullName: Cheetah.Kafka.Testing.IKafkaTestWriter<TKey, T>
  nameWithType.vb: IKafkaTestWriter(Of TKey, T)
  fullName.vb: Cheetah.Kafka.Testing.IKafkaTestWriter(Of TKey, T)
  name.vb: IKafkaTestWriter(Of TKey, T)
  spec.csharp:
  - uid: Cheetah.Kafka.Testing.IKafkaTestWriter`2
    name: IKafkaTestWriter
    href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  spec.vb:
  - uid: Cheetah.Kafka.Testing.IKafkaTestWriter`2
    name: IKafkaTestWriter
    href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: Cheetah.Kafka.Testing.KafkaTestWriter`2.WriteAsync*
  commentId: Overload:Cheetah.Kafka.Testing.KafkaTestWriter`2.WriteAsync
  href: Cheetah.Kafka.Testing.KafkaTestWriter-2.html#Cheetah_Kafka_Testing_KafkaTestWriter_2_WriteAsync__1___
  name: WriteAsync
  nameWithType: KafkaTestWriter<TKey, T>.WriteAsync
  fullName: Cheetah.Kafka.Testing.KafkaTestWriter<TKey, T>.WriteAsync
  nameWithType.vb: KafkaTestWriter(Of TKey, T).WriteAsync
  fullName.vb: Cheetah.Kafka.Testing.KafkaTestWriter(Of TKey, T).WriteAsync
- uid: Cheetah.Kafka.Testing.IKafkaTestWriter{{TKey},{T}}.WriteAsync({T}[])
  commentId: M:Cheetah.Kafka.Testing.IKafkaTestWriter{`0,`1}.WriteAsync(`1[])
  parent: Cheetah.Kafka.Testing.IKafkaTestWriter{{TKey},{T}}
  definition: Cheetah.Kafka.Testing.IKafkaTestWriter`2.WriteAsync(`1[])
  href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html#Cheetah_Kafka_Testing_IKafkaTestWriter_2_WriteAsync__1___
  name: WriteAsync(params T[])
  nameWithType: IKafkaTestWriter<TKey, T>.WriteAsync(params T[])
  fullName: Cheetah.Kafka.Testing.IKafkaTestWriter<TKey, T>.WriteAsync(params T[])
  nameWithType.vb: IKafkaTestWriter(Of TKey, T).WriteAsync(ParamArray T())
  fullName.vb: Cheetah.Kafka.Testing.IKafkaTestWriter(Of TKey, T).WriteAsync(ParamArray T())
  name.vb: WriteAsync(ParamArray T())
  spec.csharp:
  - uid: Cheetah.Kafka.Testing.IKafkaTestWriter{`0,`1}.WriteAsync(`1[])
    name: WriteAsync
    href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html#Cheetah_Kafka_Testing_IKafkaTestWriter_2_WriteAsync__1___
  - name: (
  - name: params
  - name: " "
  - name: T
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Cheetah.Kafka.Testing.IKafkaTestWriter{`0,`1}.WriteAsync(`1[])
    name: WriteAsync
    href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html#Cheetah_Kafka_Testing_IKafkaTestWriter_2_WriteAsync__1___
  - name: (
  - name: ParamArray
  - name: " "
  - name: T
  - name: (
  - name: )
  - name: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task{Confluent.Kafka.DeliveryResult{{TKey},{T}}[]}
  commentId: T:System.Threading.Tasks.Task{Confluent.Kafka.DeliveryResult{`0,`1}[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<DeliveryResult<TKey, T>[]>
  nameWithType: Task<DeliveryResult<TKey, T>[]>
  fullName: System.Threading.Tasks.Task<Confluent.Kafka.DeliveryResult<TKey, T>[]>
  nameWithType.vb: Task(Of DeliveryResult(Of TKey, T)())
  fullName.vb: System.Threading.Tasks.Task(Of Confluent.Kafka.DeliveryResult(Of TKey, T)())
  name.vb: Task(Of DeliveryResult(Of TKey, T)())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Confluent.Kafka.DeliveryResult`2
    name: DeliveryResult
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Confluent.Kafka.DeliveryResult`2
    name: DeliveryResult
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
  - name: )
- uid: Cheetah.Kafka.Testing.IKafkaTestWriter`2.WriteAsync(`1[])
  commentId: M:Cheetah.Kafka.Testing.IKafkaTestWriter`2.WriteAsync(`1[])
  href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html#Cheetah_Kafka_Testing_IKafkaTestWriter_2_WriteAsync__1___
  name: WriteAsync(params T[])
  nameWithType: IKafkaTestWriter<TKey, T>.WriteAsync(params T[])
  fullName: Cheetah.Kafka.Testing.IKafkaTestWriter<TKey, T>.WriteAsync(params T[])
  nameWithType.vb: IKafkaTestWriter(Of TKey, T).WriteAsync(ParamArray T())
  fullName.vb: Cheetah.Kafka.Testing.IKafkaTestWriter(Of TKey, T).WriteAsync(ParamArray T())
  name.vb: WriteAsync(ParamArray T())
  spec.csharp:
  - uid: Cheetah.Kafka.Testing.IKafkaTestWriter`2.WriteAsync(`1[])
    name: WriteAsync
    href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html#Cheetah_Kafka_Testing_IKafkaTestWriter_2_WriteAsync__1___
  - name: (
  - name: params
  - name: " "
  - name: T
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Cheetah.Kafka.Testing.IKafkaTestWriter`2.WriteAsync(`1[])
    name: WriteAsync
    href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html#Cheetah_Kafka_Testing_IKafkaTestWriter_2_WriteAsync__1___
  - name: (
  - name: ParamArray
  - name: " "
  - name: T
  - name: (
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Cheetah.Kafka.Testing.IKafkaTestWriter{{TKey},{T}}.WriteAsync(Confluent.Kafka.Message{{TKey},{T}}[])
  commentId: M:Cheetah.Kafka.Testing.IKafkaTestWriter{`0,`1}.WriteAsync(Confluent.Kafka.Message{`0,`1}[])
  parent: Cheetah.Kafka.Testing.IKafkaTestWriter{{TKey},{T}}
  definition: Cheetah.Kafka.Testing.IKafkaTestWriter`2.WriteAsync(Confluent.Kafka.Message{`0,`1}[])
  href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html#Cheetah_Kafka_Testing_IKafkaTestWriter_2_WriteAsync_Confluent_Kafka_Message__0__1____
  name: WriteAsync(params Message<TKey, T>[])
  nameWithType: IKafkaTestWriter<TKey, T>.WriteAsync(params Message<TKey, T>[])
  fullName: Cheetah.Kafka.Testing.IKafkaTestWriter<TKey, T>.WriteAsync(params Confluent.Kafka.Message<TKey, T>[])
  nameWithType.vb: IKafkaTestWriter(Of TKey, T).WriteAsync(ParamArray Message(Of TKey, T)())
  fullName.vb: Cheetah.Kafka.Testing.IKafkaTestWriter(Of TKey, T).WriteAsync(ParamArray Confluent.Kafka.Message(Of TKey, T)())
  name.vb: WriteAsync(ParamArray Message(Of TKey, T)())
  spec.csharp:
  - uid: Cheetah.Kafka.Testing.IKafkaTestWriter{`0,`1}.WriteAsync(Confluent.Kafka.Message{`0,`1}[])
    name: WriteAsync
    href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html#Cheetah_Kafka_Testing_IKafkaTestWriter_2_WriteAsync_Confluent_Kafka_Message__0__1____
  - name: (
  - name: params
  - name: " "
  - uid: Confluent.Kafka.Message`2
    name: Message
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Cheetah.Kafka.Testing.IKafkaTestWriter{`0,`1}.WriteAsync(Confluent.Kafka.Message{`0,`1}[])
    name: WriteAsync
    href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html#Cheetah_Kafka_Testing_IKafkaTestWriter_2_WriteAsync_Confluent_Kafka_Message__0__1____
  - name: (
  - name: ParamArray
  - name: " "
  - uid: Confluent.Kafka.Message`2
    name: Message
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
  - name: )
- uid: Confluent.Kafka.Message{{TKey},{T}}[]
  isExternal: true
  name: Message<TKey, T>[]
  nameWithType: Message<TKey, T>[]
  fullName: Confluent.Kafka.Message<TKey, T>[]
  nameWithType.vb: Message(Of TKey, T)()
  fullName.vb: Confluent.Kafka.Message(Of TKey, T)()
  name.vb: Message(Of TKey, T)()
  spec.csharp:
  - uid: Confluent.Kafka.Message`2
    name: Message
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Confluent.Kafka.Message`2
    name: Message
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: Cheetah.Kafka.Testing.IKafkaTestWriter`2.WriteAsync(Confluent.Kafka.Message{`0,`1}[])
  commentId: M:Cheetah.Kafka.Testing.IKafkaTestWriter`2.WriteAsync(Confluent.Kafka.Message{`0,`1}[])
  isExternal: true
  href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html#Cheetah_Kafka_Testing_IKafkaTestWriter_2_WriteAsync_Confluent_Kafka_Message__0__1____
  name: WriteAsync(params Message<TKey, T>[])
  nameWithType: IKafkaTestWriter<TKey, T>.WriteAsync(params Message<TKey, T>[])
  fullName: Cheetah.Kafka.Testing.IKafkaTestWriter<TKey, T>.WriteAsync(params Confluent.Kafka.Message<TKey, T>[])
  nameWithType.vb: IKafkaTestWriter(Of TKey, T).WriteAsync(ParamArray Message(Of TKey, T)())
  fullName.vb: Cheetah.Kafka.Testing.IKafkaTestWriter(Of TKey, T).WriteAsync(ParamArray Confluent.Kafka.Message(Of TKey, T)())
  name.vb: WriteAsync(ParamArray Message(Of TKey, T)())
  spec.csharp:
  - uid: Cheetah.Kafka.Testing.IKafkaTestWriter`2.WriteAsync(Confluent.Kafka.Message{`0,`1}[])
    name: WriteAsync
    href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html#Cheetah_Kafka_Testing_IKafkaTestWriter_2_WriteAsync_Confluent_Kafka_Message__0__1____
  - name: (
  - name: params
  - name: " "
  - uid: Confluent.Kafka.Message`2
    name: Message
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: Cheetah.Kafka.Testing.IKafkaTestWriter`2.WriteAsync(Confluent.Kafka.Message{`0,`1}[])
    name: WriteAsync
    href: Cheetah.Kafka.Testing.IKafkaTestWriter-2.html#Cheetah_Kafka_Testing_IKafkaTestWriter_2_WriteAsync_Confluent_Kafka_Message__0__1____
  - name: (
  - name: ParamArray
  - name: " "
  - uid: Confluent.Kafka.Message`2
    name: Message
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
  - name: )
